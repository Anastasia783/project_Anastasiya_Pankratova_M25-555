from .constants import ROOMS, DIRECTIONS
from .player_actions import move_player, take_item, use_item, show_inventory, get_input
from .utils import describe_current_room, solve_puzzle, show_help, check_win_condition, handle_random_event, attempt_open_treasure


def initialize_game():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã."""
    return {
        'player_inventory': [],
        'current_room': 'entrance',
        'game_over': False,
        'steps_taken': 0,
        'solved_puzzles': set()
    }


def process_command(game_state, command):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä–æ–∫–∞."""
    parts = command.strip().lower().split()
    if not parts:
        return "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É!"
    
    action = parts[0]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ—Å–ª–æ–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    if action in DIRECTIONS:
        return move_player(game_state, action)
    
    match action:
        case 'quit' | 'exit':
            game_state['game_over'] = True
            return "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
        
        case 'help':
            return show_help()
        
        case 'look':
            return describe_current_room(game_state)
        
        case 'inventory':
            return show_inventory(game_state)
        
        case 'go':
            if len(parts) < 2:
                return "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: go [north|south|east|west]"
            return move_player(game_state, parts[1])
        
        case 'take':
            if len(parts) < 2:
                return "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç: take [–ø—Ä–µ–¥–º–µ—Ç]"
            return take_item(game_state, parts[1])
        
        case 'use':
            if len(parts) < 2:
                return "–£–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç: use [–ø—Ä–µ–¥–º–µ—Ç]"
            return use_item(game_state, parts[1])
        
        case 'solve':
            # –í treasure_room –≤–º–µ—Å—Ç–æ solve_puzzle –≤—ã–∑—ã–≤–∞–µ–º attempt_open_treasure
            if game_state['current_room'] == 'treasure_room':
                return attempt_open_treasure(game_state)
            return solve_puzzle(game_state)
        
        case _:
            return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {action}. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."


def main():
    """–ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª."""
    game_state = initialize_game()
    
    print("üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –õ–∞–±–∏—Ä–∏–Ω—Ç —Å–æ–∫—Ä–æ–≤–∏—â!")
    print("=" * 50)
    print(describe_current_room(game_state))
    
    while not game_state['game_over']:
        try:
            command = get_input("\n> ")
            result = process_command(game_state, command)
            
            if result:
                print(f"\n{result}")
            
            if check_win_condition(game_state):
                print(f"\nüéâ –ü–û–ë–ï–î–ê! –í—ã –Ω–∞—à–ª–∏ —Å–æ–∫—Ä–æ–≤–∏—â–µ!")
                print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: {game_state['steps_taken']}")
                game_state['game_over'] = True
                break
            
            if not game_state['game_over']:
                event_result = handle_random_event(game_state)
                if event_result:
                    print(f"\nüí´ {event_result}")
            
        except KeyboardInterrupt:
            print("\n\n–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()